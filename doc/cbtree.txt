2021-08-30 -- cbtree (Compact Binary Tree)

Summary
-------

The cbtree is a much more compact variant of the ebtree, which only contains
two branch pointers. There is no upward pointers so some operations are slower
as they will require a lookup. For example there is no next().

But it provides a number of other benefits. The first one being the memory
usage: the tree uses the same storage as a list, thus can be installed
anywhere a list would be used. This can be particularly interesting for
read-mostly data (configuration, append-only indexes etc). It preserves
structure alignment, thus does not require to contain the data itself, the
data may be appended just after the pointer nodes, which saves the need for
typed trees thus typed operations. It may also make the code a bit cleaner,
because with ebtree it's often tempting to touch node->key from the main
code, without always realizing the impacts (namely with signed values).

It should also be easier to implement variants (e.g. case insensitive strings
lookups, or faster memory lookups matching one word at a time, etc) thanks to
the unified data types.

Duplicates are possible by using list elements, but are a bit tricky to
implement. They should be agnostic to the data representation.


Properties
----------
- No two nodes may point to the same leaf, since a leaf only has one parent
  node.

- given that each node has two pointers, there are twice as many pointers as
  nodes in the tree, so each node appears twice (once as a node and once as a
  leaf).

- If a node has two leaves, one of them must be the node itself. Indeed, a
  node's leaf is are always below the node so if the node has two leaves
  there is no other node.

- as a corrolary, no leaf pointer may point to a node having two leaves
  except when it's the same.

- a node has up to two roles depending how it's reached. One is to be an
  intermediary node, the other one is to be a leaf.

- there are two types of nodes, some have a single role and are only leaves,
  other ones are the dual-role nodes described above.

- duplicates are stored in doubly-linked lists inserted between the node and
  the first leaf. By convention, any duplicate is a leaf.


Principles
----------

Like for the ebtree, a dual-role node has two parts:
  - the node (contains the two branches)
  - the leaf (the point that contains the unique value)

They are solely differentiated by path followed to reach them. To put it
simply, the tree is arranged so that double-role nodes have their node part
visited first and their leaf part visited second. In practice it means that
the same pointer is seen twice during the tree descent.

Duplicates may be implemented using a construct very similar to dual-linked
lists. For this, the node that normally points to a leaf will point to the
list's last element, using a leaf tag. This element's "prev" pointer will point
to the previous list element with a tagged pointer if it's another list link,
or an untagged pointer for the original node. The list element's "next" pointer
points to the element after the first node, which might be the element itself.
This one is always tagged.

The tree descent looks like this:

1) go down until a tagged pointer is met
2) this pointer is either for a leaf or for a list of duplicates
3) if the tagged pointer is the same as the node's, it's a leaf
4) if the pointer's N points to itself+1, cannot be a leaf thanks to principles
   above, thus it's a list (single duplicate)
5) if both of the pointed element's pointers are tagged, it cannot be a leaf,
   thus it's a list with at least 2 duplicates
//6) if neither pointer is tagged, it's necessarily a leaf (note that if at
//   least the next pointer is untagged it cannot be a list thus it was a leaf)
//7) if the pointer's P points to itself+1 (when?) it's a list
8) otherwise it's a regular leaf

Other rules might apply for 4 and next  above: lists always have N tagged. Thus
if ptr->N is untagged, it's a leaf. Otherwise if ptr->P tagged, it's a 2+ list.
Otherwise if ptr->N == ptr+1 it's a 1-dup list, otherwise it's a leaf. Check
with "4,7,6" and "4,5,6".

The first element in a dup-list is always untag(untag(ptr)->N)->P.


Possibly convenient approach
----------------------------

Since the tree is totally oriented in a single direction, all operations need
to operate on the key using lookups. In order to ease code production, it's
probably worth implementing generic lookup functions that are forcefully
inlined and which return a wide variety of pointers depending on the use case:
  - node's grand parent
  - node's parent
  - leaf's parent
  - last left branch
  - last right branch
  - ... or variants of these such as pointer to the pointer itself, info on the
    side and so on.

These would be returned as void** or struct cbtree** that the calling functions
(not inlined) would explicitly assign to &local_var or to NULL so that the
compiler can trivially optimize them away.

Parent/grand-parents are useful for inserting and removing. Last left and last
right branches are useful to implement next() and prev(), combined with a
rightmost or leftmost desccent.

This way most of the complexity would be left into a single function per lookup
method, and the rest of the code would just call it with a varying set of
parameters. As a nice bonus, this would permit to relatively easily implement
variants such as delete_by_value(), which would only cast the pointer to the
value to a node before looking it up, just like the regular value lookup would
do. This would also permit to easily implement extra methods such as lookup_gt
and lookup_lt() which would just perform a lookup_ge()/lookup_le() with the
pointer to left/right set so that the caller could trivially get the next/prev
on exact match.

Several short-term envisioned use cases warrant a first version not supporting
duplicates (e.g. haproxy's pattern references and stick tables). Also, the
experience gathered on existing code definitely indicates that support for
duplicates shouldn't be a property of the tree storage but of the code using
the tree, because the check for duplicates, the fallbacks, the use of insert()
for lookups etc depends on this and is has a direct impact on how the code is
written. This means that distinct functions should be written for this (likely
with yet another argument passed to the generic inline function).
